Changes for AppController (AppScale 1.0.3 to 1.1):

2009-MM-DD  Chris Bunch  <cgb@cs.ucsb.edu>
    * djinn (setup_config_files): Added extra shell call to run iptables and lock down port access as needed. This is done after we set up the masters and slaves files.
    (setup_config_files): Added extra shell calls to copy over masters and slaves files to $APPSCALE_HOME/.appscale/ for iptables config file.
    (spawn_appengine): Added extra scp calls to copy over the ssh key to $APPSCALE_HOME/.appscale/ssh.key in addition to copying over the ssh key to $APPSCALE_HOME/.appscale/<keypath>.
    (change_job): Changed how we determine whether all other nodes are done to actually wait until we get the ok from all three instead of allowing it to pass if all three throw "Connection Refused".
    (set_parameters): Now setting the EC2_URL via ENV instead of manually exporting it everytime we do an EC2 command.
    (change_job): Merged from Soo Hwan: Added extra call to check if Cassandra is the DB to use and if so, call start_cassandra.
    (setup_config_files) Merged from Soo Hwan: Added checks to see if DB used is Cassandra, and if so to have all IPs see themselves as masters for purposes of setting up config files.
    (start_cassandra): Merged from Soo Hwan: New function, will start up Cassandra. No notion of master/slave in Cassandra, so no need for _master and _slave methods.
    (start_stop): Merged from Soo Hwan: New function, will bring down Cassandra. No notion of master/slave in Cassandra, so no need for _master and _slave methods.
        
    * djinn_job_data (initialize): Instead of doing a regex to grab the IP of the box, just grab the first colon delimited value, allowing us to use FQDNs as well as IP addresses.

    * helperfunctions (various): Changing keyname used to refer to a global variable instead of being hardcoded as ssh.key.
    (various): No longer need to source EC2_URL since we set it properly in djinn before calling any of helperfunction's methods.
    (spawn_vms): Removing key_location and ec2_url parameters since the key location is really the key's name (a global variable now) and the ec2_url is set by the calling code.
    
    * djinnServer (main): Added a call to clear out the contents of the known_hosts file, since the file is sometimes persistent it can cause a man-in-the-middle warning message that will prevent the system from coming up.
    (main): Replaced calls to "puts" with calls to Djinn.log_debug so that we can actually see the messages being outputted if we aren't running the server by hand.

Changes for AppController (AppScale 1.0.2 to 1.0.3):

2009-03-30  Chris Bunch  <cgb@cs.ucsb.edu>

    * none
    
Changes for AppController (AppScale 1.0.1 to 1.0.2):

2009-03-20  Chris Bunch  <cgb@cs.ucsb.edu>

    * none: Code is now located in /root/appscale/AppController instead of /root/djinn to match naming scheme used in tech report.

    * all files: Changed absolute paths of files required to be relative.

    * djinn (start_appengine): Fixed scenario where if AppScale is started with no AppEngine app, the string "none" would always stay in the list of loaded apps. It now is checked for whenever a new app is added.
    
    * djinn (job_start): Now dumping heartbeat data received from all nodes to /root/.appscale/status-{ip of node}.log for later retrieval by load balancer's status controller (and possibly for use as a stream)
    
    * helperfunctions (global variables): Changed time we wait for virtual machines to come up to be one hour instead of two hours since Euca enforces a one hour timeout anyways.

Changes for AppController (AppScale 1.0 to 1.0.1):

2009-03-10  Chris Bunch  <cgb@cs.ucsb.edu>

    * djinn (various methods): Added 'rescue' clause to most SOAP calls to rescue Exception since Errno::ECONNRESET had killed the program last run and it was unexpected. Logging occurrences of it to note what to do with it in the future.
    
    * djinn (get_public_ips): Removed this function since it wasn't used anywhere and used old rules to determine public IPs.

    * helperfunctions (spawn_vms): Added code to kill virtual machines that fail to get a public IP address within the time limit as well as code to fail if instances have been terminated.
    
    * helperfunctions (get_ips): New function, returns suspected public IPs as well as 0.0.0.0 for instances without a public IP.
    
    * helperfunctions (terminate_dead_vms): Removed this function since it wasn't being used anywhere and it used outdated rules to deduce public IPs.